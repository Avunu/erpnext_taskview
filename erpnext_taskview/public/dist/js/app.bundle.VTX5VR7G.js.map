{
  "version": 3,
  "sources": ["../../../../../apps/erpnext_taskview/erpnext_taskview/public/js/app.bundle.js"],
  "sourcesContent": ["frappe.provide(\"frappe.views\");\n\nlet old_this;\n\n// if (frappe.views.ListViewSelect.doctype === \"Task\") {\n//     frappe.views.ListViewSelect.add_view_to_menu(\n//         \"Tasks\",\n//         () => {\n//             this.set_route(\"tasks\");\n//         }\n//     );\n// }\n\nfrappe.views.TaskViewSelect = class TaskViewSelect extends frappe.views.ListViewSelect {\n    setup_views() {\n        // Start by calling the original setup_views to get the initial views object\n        super.setup_views();\n\t\t\n\t\tif (this.doctype === \"Task\") {\n\t\t\t// Add the Task view to the views object\n\t\t\tthis.add_view_to_menu(\n\t\t\t\t\"Tasks\",\n\t\t\t\t() => {\n                    // console.log('this.page');\n                    // console.log(this.page);\n                    // console.log(this.list_view.data);\n                    this.set_route(\"tasks\");\n\t\t\t\t\t// Instantiate the custom TaskView\n\t\t\t\t\t// this.task_view = new frappe.views.TasksView({\n\t\t\t\t\t// \tdoctype: this.doctype,\n\t\t\t\t\t// \tparent: this.parent,\n\t\t\t\t\t// \tpage: this.page,\n\t\t\t\t\t// \t// the data already loaded with the default List view\n\t\t\t\t\t// \tdata: this.list_view.data,\n\t\t\t\t\t// });\n                    // current view handler\n                    // () => {\n                    //     // const accounts = this.get_email_accounts();\n                    //     // let default_action;\n                    //     // if (has_common(frappe.user_roles, [\"System Manager\", \"Administrator\"])) {\n                    //     //     default_action = {\n                    //     //         label: __(\"New Email Account\"),\n                    //     //         action: () => frappe.new_doc(\"Email Account\"),\n                    //     //     };\n                    //     // }\n                    //     // this.setup_dropdown_in_sidebar(\"Inbox\", accounts, default_action);\n                        \n                    // }\n\t\t\t\t}\n            );\n\t\t}\n    }\n};\n\n\n\n//     // setup_views() {\n//     //     super.setup_views();\n//     //     this.task_view_select = new frappe.views.TaskViewSelect({\n//     //         doctype: this.doctype,\n//     //         parent: this.page.main,\n//     //         page: this\n//     //     });\n//     // }\n// };\n\n\nfrappe.router.list_views.push(\"tasks\");\nfrappe.router.list_views_route[\"tasks\"] = \"Tasks\";\n// frappe.views.view_modes.push(\"Tasks\");\n\n// console.log(frappe.router);\n\n\n// frappe.router.add_route(\"task-view\", () => {\n//     let view = new frappe.views.TaskView({\n//         doctype: \"Task\", // or this.doctype\n//         parent: frappe.container.page,\n//     });\n//     view.render();\n// });\n\nfrappe.views.TasksView = class TasksView extends frappe.views.ListView {\n    // constructor(opts) {\n    //     console.log('TasksView');\n    //     console.log(opts);\n    //     super(opts);\n    // }\n    setup_defaults() {\n        old_this = this;\n        console.log('old_this1');\n        console.log(old_this);\n        super.setup_defaults();\n        // console.log('setup_defaults');\n        // console.log(this);\n        this.page_title = __(\"Task View\");\n        this.page_name = \"task-view\";\n        this.show_hide_filters = false;\n        this.list_view_settings = {\n            fields: null,\n        };\n        this.old_this = old_this;\n        console.log('this.old_this2');\n        console.log(this.old_this);\n    }\n\n    refresh() {\n\t\tlet args = this.get_call_args();\n\t\tif (this.no_change(args)) {\n\t\t\t// console.log('throttled');\n\t\t\treturn Promise.resolve();\n\t\t}\n\t\tthis.freeze(true);\n\t\t// fetch data from server\n\t\treturn frappe.call(args).then((r) => {\n\t\t\t// render\n\t\t\tthis.prepare_data(r);\n\t\t\tthis.toggle_result_area();\n\t\t\tthis.before_render();\n\t\t\tthis.render();\n\t\t\tthis.after_render();\n\t\t\tthis.freeze(false);\n\t\t\tthis.reset_defaults();\n\t\t\tif (this.settings.refresh) {\n\t\t\t\tthis.settings.refresh(this);\n\t\t\t}\n\t\t});\n\t}\n\n    setup_page() {\n\n        console.log('this.old_this3');\n        console.log(this.old_this);\n        \n        // console.log('setup_page1');\n        // console.log(this);\n        // console.log(this.page);\n        // console.log(this.parent);\n        // console.log(this.data);\n        \n        // this.page = this.parent.page || {};\n        \n        super.setup_page();\n        // this.refresh();\n\n        console.log('this.old_this4');\n        console.log(old_this);\n\n        this.data = this.old_this.data;\n        console.log('data from old_this5');\n        console.log(old_this.data);\n        console.log(this.data);\n        \n        frappe\n            .call(\"frappe.desk.listview.get_list_settings\", {\n                doctype: this.doctype,\n            })\n            .then((doc) => {\n                this.list_view_settings = doc.message || {};\n    \n                // Safely handle undefined fields\n                if (this.list_view_settings.fields === undefined) {\n                    this.list_view_settings.fields = null;\n                }\n    \n                // Primary action setup\n                this.page.set_primary_action(__(\"New Task\"), () => {\n                    frappe.new_doc(\"Task\");\n                });\n    \n                // Other dependent code can go here\n                // console.log('setup_page2');\n                // console.log(this);\n            })\n            .catch((error) => {\n                console.error(\"Failed to get list settings:\", error);\n            });\n    }\n    \n    // WE DON'T NEED SKELETONS.\n    show_skeleton() {}\n    hide_skeleton() {}\n    \n    render_list() {\n\t\t// clear rows\n\t\t// this.$result.find(\".list-row-container\").remove();\n        console.log('render_list');\n        console.log(this)\n\n\t\t// if (this.data.length > 0) {\n\t\t// \t// append rows\n\t\t// \tconsole.log(this.data);\n\t\t// }\n\t}\n\n    // render() {\n    //     super.render();\n    //     this.render_list();\n    // }\n};\n\n// Override the global ListViewSelect with TaskViewSelect\nfrappe.views.ListViewSelect = frappe.views.TaskViewSelect;\n"],
  "mappings": ";;AAAA,SAAO,QAAQ,cAAc;AAE7B,MAAI;AAWJ,SAAO,MAAM,iBAAiB,MAAM,uBAAuB,OAAO,MAAM,eAAe;AAAA,IACnF,cAAc;AAEV,YAAM,YAAY;AAExB,UAAI,KAAK,YAAY,QAAQ;AAE5B,aAAK;AAAA,UACJ;AAAA,UACA,MAAM;AAIU,iBAAK,UAAU,OAAO;AAAA,UAsBtC;AAAA,QACQ;AAAA,MACV;AAAA,IACE;AAAA,EACJ;AAeA,SAAO,OAAO,WAAW,KAAK,OAAO;AACrC,SAAO,OAAO,iBAAiB,WAAW;AAc1C,SAAO,MAAM,YAAY,MAAM,kBAAkB,OAAO,MAAM,SAAS;AAAA,IAMnE,iBAAiB;AACb,iBAAW;AACX,cAAQ,IAAI,WAAW;AACvB,cAAQ,IAAI,QAAQ;AACpB,YAAM,eAAe;AAGrB,WAAK,aAAa,GAAG,WAAW;AAChC,WAAK,YAAY;AACjB,WAAK,oBAAoB;AACzB,WAAK,qBAAqB;AAAA,QACtB,QAAQ;AAAA,MACZ;AACA,WAAK,WAAW;AAChB,cAAQ,IAAI,gBAAgB;AAC5B,cAAQ,IAAI,KAAK,QAAQ;AAAA,IAC7B;AAAA,IAEA,UAAU;AACZ,UAAI,OAAO,KAAK,cAAc;AAC9B,UAAI,KAAK,UAAU,IAAI,GAAG;AAEzB,eAAO,QAAQ,QAAQ;AAAA,MACxB;AACA,WAAK,OAAO,IAAI;AAEhB,aAAO,OAAO,KAAK,IAAI,EAAE,KAAK,CAAC,MAAM;AAEpC,aAAK,aAAa,CAAC;AACnB,aAAK,mBAAmB;AACxB,aAAK,cAAc;AACnB,aAAK,OAAO;AACZ,aAAK,aAAa;AAClB,aAAK,OAAO,KAAK;AACjB,aAAK,eAAe;AACpB,YAAI,KAAK,SAAS,SAAS;AAC1B,eAAK,SAAS,QAAQ,IAAI;AAAA,QAC3B;AAAA,MACD,CAAC;AAAA,IACF;AAAA,IAEG,aAAa;AAET,cAAQ,IAAI,gBAAgB;AAC5B,cAAQ,IAAI,KAAK,QAAQ;AAUzB,YAAM,WAAW;AAGjB,cAAQ,IAAI,gBAAgB;AAC5B,cAAQ,IAAI,QAAQ;AAEpB,WAAK,OAAO,KAAK,SAAS;AAC1B,cAAQ,IAAI,qBAAqB;AACjC,cAAQ,IAAI,SAAS,IAAI;AACzB,cAAQ,IAAI,KAAK,IAAI;AAErB,aACK,KAAK,0CAA0C;AAAA,QAC5C,SAAS,KAAK;AAAA,MAClB,CAAC,EACA,KAAK,CAAC,QAAQ;AACX,aAAK,qBAAqB,IAAI,WAAW,CAAC;AAG1C,YAAI,KAAK,mBAAmB,WAAW,QAAW;AAC9C,eAAK,mBAAmB,SAAS;AAAA,QACrC;AAGA,aAAK,KAAK,mBAAmB,GAAG,UAAU,GAAG,MAAM;AAC/C,iBAAO,QAAQ,MAAM;AAAA,QACzB,CAAC;AAAA,MAKL,CAAC,EACA,MAAM,CAAC,UAAU;AACd,gBAAQ,MAAM,gCAAgC,KAAK;AAAA,MACvD,CAAC;AAAA,IACT;AAAA,IAGA,gBAAgB;AAAA,IAAC;AAAA,IACjB,gBAAgB;AAAA,IAAC;AAAA,IAEjB,cAAc;AAGV,cAAQ,IAAI,aAAa;AACzB,cAAQ,IAAI,IAAI;AAAA,IAMvB;AAAA,EAMD;AAGA,SAAO,MAAM,iBAAiB,OAAO,MAAM;",
  "names": []
}
